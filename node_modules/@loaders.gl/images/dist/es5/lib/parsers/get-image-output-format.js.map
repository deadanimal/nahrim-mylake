{"version":3,"sources":["../../../../src/lib/parsers/get-image-output-format.js"],"names":["getImageOutputFormat","options","imageOptions","image","type","Error"],"mappings":";;;;;;;AAAA;;AAIe,SAASA,oBAAT,GAA4C;AAAA,MAAdC,OAAc,uEAAJ,EAAI;AACzD,MAAMC,YAAY,GAAGD,OAAO,CAACE,KAAR,IAAiB,EAAtC;AACA,MAAMC,IAAI,GAAGF,YAAY,CAACE,IAAb,IAAqB,MAAlC;;AAEA,UAAQA,IAAR;AACE,SAAK,aAAL;AACA,SAAK,MAAL;AACA,SAAK,SAAL;AAEE,UAAI,CAAC,qCAAqBA,IAArB,CAAL,EAAiC;AAC/B,cAAM,IAAIC,KAAJ,gCAAkCD,IAAlC,2CAAN;AACD;;AACD,aAAOA,IAAP;;AAEF,SAAK,MAAL;AACE,aAAO,qCAAP;;AAEF;AAEE,YAAM,IAAIC,KAAJ,gCAAkCD,IAAlC,EAAN;AAfJ;AAiBD","sourcesContent":["import {isImageTypeSupported, getDefaultImageType} from '../parsed-image-api/image-type';\n\n// The user can request a specific output format via `options.type`\n// TODO - ImageBitmap vs HTMLImage depends on worker threads...\nexport default function getImageOutputFormat(options = {}) {\n  const imageOptions = options.image || {};\n  const type = imageOptions.type || 'auto';\n\n  switch (type) {\n    case 'imagebitmap':\n    case 'html':\n    case 'ndarray':\n      // Check that it is actually supported\n      if (!isImageTypeSupported(type)) {\n        throw new Error(`Requested image type ${type} not available in current environment`);\n      }\n      return type;\n\n    case 'auto':\n      return getDefaultImageType();\n\n    default:\n      // Note: isImageTypeSupported throws on unknown type\n      throw new Error(`Unknown image format ${type}`);\n  }\n}\n"],"file":"get-image-output-format.js"}