{"version":3,"sources":["../../../../src/lib/parsers/parse-image.js"],"names":["SVG_DATA_URL_PATTERN","SVG_URL_PATTERN","parseImage","arrayBuffer","options","context","url","test","format"],"mappings":";;;;;;;;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;AACA;;AAEA,IAAMA,oBAAoB,GAAG,uBAA7B;AACA,IAAMC,eAAe,GAAG,mBAAxB;;SAG8BC,U;;;;;gFAAf,iBAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDC,OAAhD;AAAA;;AAAA;AAAA;AAAA;AAAA;AACbD,YAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AADa,mBAGCC,OAAO,IAAI,EAHZ,EAGNC,GAHM,QAGNA,GAHM;;AAAA,kBAITA,GAAG,KAAKN,oBAAoB,CAACO,IAArB,CAA0BD,GAA1B,KAAkCL,eAAe,CAACM,IAAhB,CAAqBD,GAArB,CAAvC,CAJM;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKE,0BAASH,WAAT,EAAsBC,OAAtB,CALF;;AAAA;AAAA;;AAAA;AAQPI,YAAAA,MARO,GAQE,sCAAqBJ,OAArB,CARF;AAAA,0BASLI,MATK;AAAA,4CAUN,aAVM,wBAYN,MAZM,wBAcN,SAdM;AAAA;;AAAA;AAAA;AAAA,mBAWI,oCAAmBL,WAAnB,EAAgCC,OAAhC,CAXJ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAaI,kCAAiBD,WAAjB,EAA8BC,OAA9B,CAbJ;;AAAA;AAAA;;AAAA;AAAA;AAAA,mBAeI,kCAAiBD,WAAjB,EAA8BC,OAA9B,CAfJ;;AAAA;AAAA;;AAAA;AAAA,6CAiBF,wBAAO,KAAP,CAjBE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["import assert from '../utils/assert';\n\nimport getImageOutputFormat from './get-image-output-format';\nimport parseToNodeImage from './parse-to-node-image';\nimport parseToHTMLImage from './parse-to-html-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseSVG from './parse-svg';\n\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\n\n// Parse to platform defined image type (ndarray on node, ImageBitmap or HTMLImage on browser)\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n\n  const {url} = context || {};\n  if (url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url))) {\n    return await parseSVG(arrayBuffer, options);\n  }\n\n  const format = getImageOutputFormat(options);\n  switch (format) {\n    case 'imagebitmap':\n      return await parseToImageBitmap(arrayBuffer, options);\n    case 'html':\n      return await parseToHTMLImage(arrayBuffer, options);\n    case 'ndarray':\n      return await parseToNodeImage(arrayBuffer, options);\n    default:\n      return assert(false);\n  }\n}\n"],"file":"parse-image.js"}