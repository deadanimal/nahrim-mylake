"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = parseImage;

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var _assert = _interopRequireDefault(require("../utils/assert"));

var _getImageOutputFormat = _interopRequireDefault(require("./get-image-output-format"));

var _parseToNodeImage = _interopRequireDefault(require("./parse-to-node-image"));

var _parseToHtmlImage = _interopRequireDefault(require("./parse-to-html-image"));

var _parseToImageBitmap = _interopRequireDefault(require("./parse-to-image-bitmap"));

var _parseSvg = _interopRequireDefault(require("./parse-svg"));

var SVG_DATA_URL_PATTERN = /^data:image\/svg\+xml/;
var SVG_URL_PATTERN = /\.svg((\?|#).*)?$/;

function parseImage(_x, _x2, _x3) {
  return _parseImage.apply(this, arguments);
}

function _parseImage() {
  _parseImage = (0, _asyncToGenerator2["default"])(_regenerator["default"].mark(function _callee(arrayBuffer, options, context) {
    var _ref, url, format;

    return _regenerator["default"].wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = options || {};
            _ref = context || {}, url = _ref.url;

            if (!(url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url)))) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return (0, _parseSvg["default"])(arrayBuffer, options);

          case 5:
            return _context.abrupt("return", _context.sent);

          case 6:
            format = (0, _getImageOutputFormat["default"])(options);
            _context.t0 = format;
            _context.next = _context.t0 === 'imagebitmap' ? 10 : _context.t0 === 'html' ? 13 : _context.t0 === 'ndarray' ? 16 : 19;
            break;

          case 10:
            _context.next = 12;
            return (0, _parseToImageBitmap["default"])(arrayBuffer, options);

          case 12:
            return _context.abrupt("return", _context.sent);

          case 13:
            _context.next = 15;
            return (0, _parseToHtmlImage["default"])(arrayBuffer, options);

          case 15:
            return _context.abrupt("return", _context.sent);

          case 16:
            _context.next = 18;
            return (0, _parseToNodeImage["default"])(arrayBuffer, options);

          case 18:
            return _context.abrupt("return", _context.sent);

          case 19:
            return _context.abrupt("return", (0, _assert["default"])(false));

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseImage.apply(this, arguments);
}
//# sourceMappingURL=parse-image.js.map