import _regeneratorRuntime from "@babel/runtime/regenerator";
import _asyncToGenerator from "@babel/runtime/helpers/esm/asyncToGenerator";
import assert from '../utils/assert';
import getImageOutputFormat from './get-image-output-format';
import parseToNodeImage from './parse-to-node-image';
import parseToHTMLImage from './parse-to-html-image';
import parseToImageBitmap from './parse-to-image-bitmap';
import parseSVG from './parse-svg';
var SVG_DATA_URL_PATTERN = /^data:image\/svg\+xml/;
var SVG_URL_PATTERN = /\.svg((\?|#).*)?$/;
export default function parseImage(_x, _x2, _x3) {
  return _parseImage.apply(this, arguments);
}

function _parseImage() {
  _parseImage = _asyncToGenerator(_regeneratorRuntime.mark(function _callee(arrayBuffer, options, context) {
    var _ref, url, format;

    return _regeneratorRuntime.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            options = options || {};
            _ref = context || {}, url = _ref.url;

            if (!(url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url)))) {
              _context.next = 6;
              break;
            }

            _context.next = 5;
            return parseSVG(arrayBuffer, options);

          case 5:
            return _context.abrupt("return", _context.sent);

          case 6:
            format = getImageOutputFormat(options);
            _context.t0 = format;
            _context.next = _context.t0 === 'imagebitmap' ? 10 : _context.t0 === 'html' ? 13 : _context.t0 === 'ndarray' ? 16 : 19;
            break;

          case 10:
            _context.next = 12;
            return parseToImageBitmap(arrayBuffer, options);

          case 12:
            return _context.abrupt("return", _context.sent);

          case 13:
            _context.next = 15;
            return parseToHTMLImage(arrayBuffer, options);

          case 15:
            return _context.abrupt("return", _context.sent);

          case 16:
            _context.next = 18;
            return parseToNodeImage(arrayBuffer, options);

          case 18:
            return _context.abrupt("return", _context.sent);

          case 19:
            return _context.abrupt("return", assert(false));

          case 20:
          case "end":
            return _context.stop();
        }
      }
    }, _callee);
  }));
  return _parseImage.apply(this, arguments);
}
//# sourceMappingURL=parse-image.js.map