{"version":3,"sources":["../../../../src/lib/parsers/parse-svg.js"],"names":["loadToHTMLImage","parseSVG","arrayBuffer","options","textDecoder","TextDecoder","xmlText","decode","src","btoa"],"mappings":";;AACA,SAAQA,eAAR,QAA8B,uBAA9B;AAEA,wBAA8BC,QAA9B;AAAA;AAAA;;;yDAAe,iBAAwBC,WAAxB,EAAqCC,OAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AAEPC,YAAAA,WAFO,GAEO,IAAIC,WAAJ,EAFP;AAGPC,YAAAA,OAHO,GAGGF,WAAW,CAACG,MAAZ,CAAmBL,WAAnB,CAHH;AASPM,YAAAA,GATO,uCAS4BC,IAAI,CAACH,OAAD,CAThC;AAAA;AAAA,mBAUAN,eAAe,CAACQ,GAAD,EAAML,OAAN,CAVf;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G","sourcesContent":["/* global TextDecoder, btoa */ // encodeURLComponent,\nimport {loadToHTMLImage} from './parse-to-html-image';\n\nexport default async function parseSVG(arrayBuffer, options) {\n  // Prepare a properly tagged data URL, and load using normal mechanism\n  const textDecoder = new TextDecoder();\n  const xmlText = textDecoder.decode(arrayBuffer);\n  // TODO Escape in browser to support e.g. Chinese characters\n  // if (typeof unescape === 'function' && typeof encodeURLComponent === 'function') {\n  //   xmlText = unescape(encodeURLComponent(xmlText));\n  // }\n  // base64 encoding is safer. utf-8 fails in some browsers\n  const src = `data:image/svg+xml;base64,${btoa(xmlText)}`;\n  return await loadToHTMLImage(src, options);\n}\n"],"file":"parse-svg.js"}