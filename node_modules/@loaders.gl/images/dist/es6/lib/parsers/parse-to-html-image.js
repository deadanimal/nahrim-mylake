export default async function parseToHTMLImage(arrayBuffer, options) {
  const mimeType = 'image/jpeg';
  const blob = new Blob([arrayBuffer], {
    type: mimeType
  });
  const URL = self.URL || self.webkitURL;
  const objectUrl = URL.createObjectURL(blob);

  try {
    return await loadToHTMLImage(objectUrl, options);
  } finally {
    URL.revokeObjectURL(objectUrl);
  }
}
export async function loadToHTMLImage(url, options) {
  const image = new Image();
  image.src = url;

  if (options.image && options.image.decode && image.decode) {
    await image.decode();
    return image;
  }

  return await new Promise((resolve, reject) => {
    try {
      image.onload = () => resolve(image);

      image.onerror = err => reject(new Error("Could not load image ".concat(url, ": ").concat(err)));
    } catch (error) {
      reject(error);
    }
  });
}
//# sourceMappingURL=parse-to-html-image.js.map