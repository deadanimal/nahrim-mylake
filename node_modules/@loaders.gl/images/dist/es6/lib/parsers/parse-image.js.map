{"version":3,"sources":["../../../../src/lib/parsers/parse-image.js"],"names":["assert","getImageOutputFormat","parseToNodeImage","parseToHTMLImage","parseToImageBitmap","parseSVG","SVG_DATA_URL_PATTERN","SVG_URL_PATTERN","parseImage","arrayBuffer","options","context","url","test","format"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,iBAAnB;AAEA,OAAOC,oBAAP,MAAiC,2BAAjC;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,gBAAP,MAA6B,uBAA7B;AACA,OAAOC,kBAAP,MAA+B,yBAA/B;AACA,OAAOC,QAAP,MAAqB,aAArB;AAEA,MAAMC,oBAAoB,GAAG,uBAA7B;AACA,MAAMC,eAAe,GAAG,mBAAxB;AAGA,eAAe,eAAeC,UAAf,CAA0BC,WAA1B,EAAuCC,OAAvC,EAAgDC,OAAhD,EAAyD;AACtED,EAAAA,OAAO,GAAGA,OAAO,IAAI,EAArB;AAEA,QAAM;AAACE,IAAAA;AAAD,MAAQD,OAAO,IAAI,EAAzB;;AACA,MAAIC,GAAG,KAAKN,oBAAoB,CAACO,IAArB,CAA0BD,GAA1B,KAAkCL,eAAe,CAACM,IAAhB,CAAqBD,GAArB,CAAvC,CAAP,EAA0E;AACxE,WAAO,MAAMP,QAAQ,CAACI,WAAD,EAAcC,OAAd,CAArB;AACD;;AAED,QAAMI,MAAM,GAAGb,oBAAoB,CAACS,OAAD,CAAnC;;AACA,UAAQI,MAAR;AACE,SAAK,aAAL;AACE,aAAO,MAAMV,kBAAkB,CAACK,WAAD,EAAcC,OAAd,CAA/B;;AACF,SAAK,MAAL;AACE,aAAO,MAAMP,gBAAgB,CAACM,WAAD,EAAcC,OAAd,CAA7B;;AACF,SAAK,SAAL;AACE,aAAO,MAAMR,gBAAgB,CAACO,WAAD,EAAcC,OAAd,CAA7B;;AACF;AACE,aAAOV,MAAM,CAAC,KAAD,CAAb;AARJ;AAUD","sourcesContent":["import assert from '../utils/assert';\n\nimport getImageOutputFormat from './get-image-output-format';\nimport parseToNodeImage from './parse-to-node-image';\nimport parseToHTMLImage from './parse-to-html-image';\nimport parseToImageBitmap from './parse-to-image-bitmap';\nimport parseSVG from './parse-svg';\n\nconst SVG_DATA_URL_PATTERN = /^data:image\\/svg\\+xml/;\nconst SVG_URL_PATTERN = /\\.svg((\\?|#).*)?$/;\n\n// Parse to platform defined image type (ndarray on node, ImageBitmap or HTMLImage on browser)\nexport default async function parseImage(arrayBuffer, options, context) {\n  options = options || {};\n\n  const {url} = context || {};\n  if (url && (SVG_DATA_URL_PATTERN.test(url) || SVG_URL_PATTERN.test(url))) {\n    return await parseSVG(arrayBuffer, options);\n  }\n\n  const format = getImageOutputFormat(options);\n  switch (format) {\n    case 'imagebitmap':\n      return await parseToImageBitmap(arrayBuffer, options);\n    case 'html':\n      return await parseToHTMLImage(arrayBuffer, options);\n    case 'ndarray':\n      return await parseToNodeImage(arrayBuffer, options);\n    default:\n      return assert(false);\n  }\n}\n"],"file":"parse-image.js"}